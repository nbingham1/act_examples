import "globals.act";
import "channel.act";

namespace pcfb
{

export defproc copy(globals g; e1of<2> L, R0, R1)
{
	c1of<2> _R0, _R1;
	bool en, _Le, R0v, R1v;
	prs<g.Vdd, g.GND>
	{
		g._sReset & en & R0.e & L.d[0] -> _R0.d[0]-
		g._sReset & en & R0.e & L.d[1] -> _R0.d[1]-
		g._sReset & en & R1.e & L.d[0] -> _R1.d[0]-
		g._sReset & en & R1.e & L.d[1] -> _R1.d[1]-

		g._sReset & en & R0v & R1v -> L.e-
		g._sReset & _Le -> en-

		~g._pReset | ~en & ~R0.e -> _R0.d[0]+
		~g._pReset | ~en & ~R0.e -> _R0.d[1]+
		~g._pReset | ~en & ~R1.e -> _R1.d[0]+
		~g._pReset | ~en & ~R1.e -> _R1.d[1]+
		~g._pReset | ~en & ~L.d[0] & ~L.d[1] -> L.e+

		~g._pReset | ~R0v & ~R1v & ~_Le -> en+

		~_R0.d[0] -> R0.d[0]+
		_R0.d[0] -> R0.d[0]-
		~_R0.d[1] -> R0.d[1]+
		_R0.d[1] -> R0.d[1]-
		~_R0.d[0]|~_R0.d[1] -> R0v+
		_R0.d[0]&_R0.d[1] -> R0v-
		~_R1.d[0] -> R1.d[0]+
		_R1.d[0] -> R1.d[0]-
		~_R1.d[1] -> R1.d[1]+
		_R1.d[1] -> R1.d[1]-
		~_R1.d[0]|~_R1.d[1] -> R1v+
		_R1.d[0]&_R1.d[1] -> R1v-
		~L.e -> _Le+
		L.e -> _Le-
	}
}

}

namespace pchb
{

export defproc copy(globals g; e1of<2> L, R0, R1)
{
	c1of<2> _R0, _R1;
	bool Rv;
	prs<g.Vdd, g.GND>
	{
		g._sReset & R0.e & L.e & L.d[0] -> _R0.d[0]-
		g._sReset & R0.e & L.e & L.d[1] -> _R0.d[1]-
		g._sReset & R1.e & L.e & L.d[0] -> _R1.d[0]-
		g._sReset & R1.e & L.e & L.d[1] -> _R1.d[1]-

		g._sReset & Rv -> L.e-

		~g._pReset | ~R0.e & ~L.e -> _R0.d[0]+
		~g._pReset | ~R0.e & ~L.e -> _R0.d[1]+
		~g._pReset | ~R1.e & ~L.e -> _R1.d[0]+
		~g._pReset | ~R1.e & ~L.e -> _R1.d[1]+

		~g._pReset | ~Rv & ~L.d[0] & ~L.d[1] -> L.e+

		~_R0.d[0] -> R0.d[0]+
		_R0.d[0] -> R0.d[0]-
		~_R0.d[1] -> R0.d[1]+
		_R0.d[1] -> R0.d[1]-
		~_R1.d[0] -> R1.d[0]+
		_R1.d[0] -> R1.d[0]-
		~_R1.d[1] -> R1.d[1]+
		_R1.d[1] -> R1.d[1]-

		(~_R1.d[0]|~_R1.d[1]) & (~_R1.d[0]|~_R1.d[1]) -> Rv+
		_R0.d[0]&_R0.d[1]&_R1.d[0]&_R1.d[1] -> Rv-
	}
}

}

namespace wchb
{

export defproc copy(globals g; e1of<2> L, R0, R1)
{
	c1of<2> _R0, _R1;
	bool Rv;
	prs<g.Vdd, g.GND>
	{
		g._sReset & R0.e & L.e & L.d[0] -> _R0.d[0]-
		g._sReset & R0.e & L.e & L.d[1] -> _R0.d[1]-
		g._sReset & R1.e & L.e & L.d[0] -> _R1.d[0]-
		g._sReset & R1.e & L.e & L.d[1] -> _R1.d[1]-
		g._sReset & Rv -> L.e-
		~g._pReset | ~R0.e & ~L.e & ~L.d[0] -> _R0.d[0]+
		~g._pReset | ~R0.e & ~L.e & ~L.d[1] -> _R0.d[1]+
		~g._pReset | ~R1.e & ~L.e & ~L.d[0] -> _R1.d[0]+
		~g._pReset | ~R1.e & ~L.e & ~L.d[1] -> _R1.d[1]+
		~g._pReset | ~Rv -> L.e+
		~_R0.d[0] -> R0.d[0]+
		_R0.d[0] -> R0.d[0]-
		~_R0.d[1] -> R0.d[1]+
		_R0.d[1] -> R0.d[1]-
		~_R1.d[0] -> R1.d[0]+
		_R1.d[0] -> R1.d[0]-
		~_R1.d[1] -> R1.d[1]+
		_R1.d[1] -> R1.d[1]-
		(~_R0.d[0]|~_R0.d[1]) & (~_R1.d[0]|~_R1.d[1]) -> Rv+
		_R0.d[0]&_R0.d[1]&_R1.d[0]&_R1.d[1] -> Rv-
	}
}

}

